<project name="java-project-include">

  <!-- figure out the absolute path to this build file -->
  <dirname property="etc.dir" file="${ant.file.java-project-include}"/>

  <!-- configuration that might be overridden by the build file -->
  <property name="app.source-dir" value="src/java"/>

  <!-- things you probably don't want to change -->
  <property name="deploy.dir"  value="dist"/>
  <property name="dist.jar"    value="${app.name}.jar"/>
  <property name="classes.dir" value="${deploy.dir}/classes"/>

  <!-- declare our classpath -->
  <path id="classpath">
    <fileset dir="${etc.dir}/../dist" includes="whirled-code.jar"/>
    <fileset dir="${etc.dir}/../dist/lib" includes="*.jar"/>
    <fileset dir="lib" includes="*.jar"/>
    <pathelement location="${classes.dir}"/>
  </path>

  <!-- generates additional methods for distributed object classes -->
  <target name="gendobj" depends="prepare">
    <taskdef name="dobj" classname="com.threerings.presents.tools.GenDObjectTask"
             classpathref="classpath"/>
    <!-- make sure the dobject class files are all compiled -->
    <javac srcdir="${app.source-dir}" destdir="${classes.dir}" debug="on"
           optimize="${build.optimize}" deprecation="on" includeAntRuntime="false">
      <classpath refid="classpath"/>
      <include name="**/*Object.java"/>
      <compilerarg value="-Xlint"/>
      <compilerarg value="-Xlint:-serial"/>
    </javac>
    <!-- now generate the associated files -->
    <dobj classpathref="classpath">
      <fileset dir="${app.source-dir}" includes="**/*Object.java"/>
    </dobj>
  </target>

  <!-- adds readField and writeField methods to Stremable classes -->
  <target name="procstream">
    <taskdef name="instream" classpathref="classpath"
             classname="com.threerings.presents.tools.InstrumentStreamableTask"/>
    <!-- now instrument the associated files -->
    <instream outdir="${classes.dir}">
      <path refid="classpath"/>
      <fileset dir="${classes.dir}" includes="**/*.class"/>
    </instream>
  </target>

  <!-- prepares the application directories -->
  <target name="prepare">
    <mkdir dir="${deploy.dir}"/>
    <mkdir dir="${classes.dir}"/>
    <copy todir="${classes.dir}">
      <fileset dir="${app.source-dir}" includes="**/*.properties"/>
    </copy>
    <mkdir dir="${classes.dir}/rsrc"/>
    <copy todir="${classes.dir}/rsrc" failonerror="false">
      <fileset dir="rsrc" includes="**/*"/>
    </copy>
    <antcall target="project-prepare"/>
  </target>

  <!-- cleans out the installed application -->
  <target name="clean">
    <delete dir="${deploy.dir}"/>
  </target>

  <!-- build the java class files -->
  <target name="compile" depends="prepare">
    <javac srcdir="${app.source-dir}" destdir="${classes.dir}"
           debug="on" optimize="${build.optimize}" deprecation="on"
           includeAntRuntime="false">
      <classpath refid="classpath"/>
      <compilerarg value="-Xlint"/>
      <compilerarg value="-Xlint:-serial"/>
    </javac>
  </target>

  <!-- a target for rebuilding everything -->
  <target name="all" depends="clean,prepare,compile,dist"/>

  <!-- builds our distribution files (war and jar) -->
  <target name="dist" depends="prepare,compile,procstream">
    <jar file="${deploy.dir}/${dist.jar}" basedir="${classes.dir}"/>
  </target>

  <!-- a target for running a single game client and server in the same VM -->
  <target name="test" depends="compile">
    <java classname="com.whirled.client.WhirledApp" fork="true">
      <classpath refid="classpath"/>
      <sysproperty key="java.library.path" value="${etc.dir}/../lib/native"/>
      <arg value="${app.name}"/>
      <arg value="tester"/>
    </java>
  </target>

</project>
